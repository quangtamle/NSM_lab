---
version: 2.1

jobs:

# sanity
  test-sanity-check:
    resource_class: medium+
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          command: |
            sudo apt-get install yamllint python3-pkg-resources
            ./.circleci/install-shellcheck.sh
      - run: yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
      - run: go version
      - run:
          name: Download Go Dependencies
          command: |
            ./scripts/go-mod-download.sh
      - run: "! go fmt ./... 2>&1 | read"
      - run: ./scripts/prepare-generate.sh
      - run: sudo ./scripts/install-protoc.sh
      - run: go generate ./...
      - run: make vet check
      - run: go build ./...
      - run: mkdir -p ~/junit/
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            export CONTAINER_FORCE_PULL="true"
            gotestsum --junitfile ~/junit/unit-tests.xml -- -short `go list ./... | grep -v networkservicemesh/test/`
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
    environment:
      GO111MODULE: "on"

# code analysis
  test-static-code-analysis:
    resource_class: large
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: lint
          command: |
            ./scripts/lint-download.sh
            make lint-check-diff
    environment:
      GO111MODULE: "on"

# packet
  create-packet:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run: pwd
      - run: ls
      - run: wget https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip
      - run: unzip terraform_0.11.13_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: mkdir terraform
      - run: ssh-keygen -t rsa -f terraform/sshkey -q -N ""
      - run: ssh-add terraform/sshkey
      - run: .circleci/provision.sh
      - run: cp -a scripts/terraform/ terraform/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - /go/bin/terraform
            - terraform

  deploy-packet:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run: mkdir terraform
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: ssh-add terraform/sshkey
      - run: cp -a terraform/terraform/* ./scripts/terraform/
      - run: cd ./scripts/terraform && terraform init && cd ../..
      - run: cd scripts/terraform && ./create-kubernetes-cluster.sh && cd ../..
      - run: make packet-get-kubeconfig
      - run:
          name: "Prepare cache data<< parameters.cluster_id >>"
          command: |
            mkdir -p data
            cp kubeconfig data/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: cncf-data-packet-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
    environment:
      PACKET_CLUSTER_ID: "<< parameters.cluster_id >>"

  destroy-packet:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: ssh-add terraform/sshkey
      - run: cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/
      - run: cd ./scripts/terraform && terraform init && cd ../..
      - run: PACKET_CLUSTER_ID=1 make packet-print-kubelet-log
      - run: PACKET_CLUSTER_ID=2 make packet-print-kubelet-log
      - run:
          when: always
          name: Destroy cluster
          command: |
            .circleci/destroy-cluster.sh

# azure
  deploy-azure:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install Azure Prerequisites
          command: |
            ./scripts/azure/install-azure-cli.sh
            az login --service-principal --username ${AZURE_SERVICE_PRINCIPAL} --password ${AZURE_SERVICE_PRINCIPAL_SECRET} --tenant ${CIRCLE_AZURE_TENANT}
      - run:
          name: Create AKS Cluster
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-start
          environment:
            AZURE_CREDENTIALS_PATH: "data/kubeconfig"
      - save_cache:
          key: cncf-data-azure-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
      - run:
          when: on_fail
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-destroy

  destroy-azure:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install Azure Prerequisites
          command: |
            ./scripts/azure/install-azure-cli.sh
            az login --service-principal --username ${AZURE_SERVICE_PRINCIPAL} --password ${AZURE_SERVICE_PRINCIPAL_SECRET} --tenant ${CIRCLE_AZURE_TENANT}
      - run:
          name: Destroy AKS Cluster
          command: |
            export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
            make azure-destroy

# aws
  deploy-aws:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install AWS Prerequisites
          command: |
            ./scripts/aws/aws-init.sh
            mkdir -p data
            sudo cp "$HOME/bin/aws-iam-authenticator" data/aws-iam-authenticator
            sudo cp "$HOME/bin/aws-iam-authenticator" /usr/local/bin/aws-iam-authenticator
      - run:
          name: Create AWS Cluster
          command: |
            export NSM_AWS_SERVICE_SUFFIX="-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            ./scripts/install-kubectl.sh
            ./scripts/go-mod-download.sh
            make aws-start
          no_output_timeout: 40m
      - save_cache:
          key: cncf-data-aws-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data
            - scripts/aws
            - ~/.aws
            - ~/.kube
      - run:
          when: on_fail
          no_output_timeout: 40m
          command: |
            export NSM_AWS_SERVICE_SUFFIX="-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            make aws-destroy
    environment:
      CLUSTER_ID: "<< parameters.cluster_id >>"
      KUBECONFIG: /home/circleci/project/data/kubeconfig
      GO111MODULE: "on"

  destroy-aws:
    parameters:
      cluster_id:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - restore_cache:
          key: cncf-data-aws-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          name: "Print kubelet log"
          command: |
            export NSM_AWS_SERVICE_SUFFIX="-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
            make aws-print-kubelet-log
      - run:
          name: Destroy AWS Cluster
          no_output_timeout: 40m
          when: always
          command: |
            ./scripts/install-kubectl.sh
            .circleci/cleanup-aws.sh
    environment:
      CLUSTER_ID: "<< parameters.cluster_id >>"
      KUBECONFIG: /home/circleci/project/data/kubeconfig
      GO111MODULE: "on"

# gke
  deploy-gke:
    parameters:
      cluster_id:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Setup Google Kubernetes Cluster
          command: |
            .circleci/gke/init-gke.sh "$GCLOUD_SERVICE_KEY" "${CIRCLE_SHA1:8:8}" "<< parameters.gke_project_id >>" "${CIRCLE_PR_NUMBER}"
            export GKE_CLUSTER_NAME="dev-testing-${CIRCLE_SHA1:8:8}-<< parameters.cluster_id >>"
            make gke-start
      - run:
          name: "Prepare cache data << parameters.cluster_id >>"
          command: |
            mkdir -p data
            cp ~/.kube/config data/kubeconfig
            cat data/kubeconfig
      - run:
          when: on_fail
          command: sudo .circleci/gke/cleanup-gke.sh
      - save_cache:
          key: cncf-data-gke-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data

  destroy-gke:
    parameters:
      cluster_id:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: "Install google cloud SDK"
          command: |
            .circleci/gke/cleanup-gke.sh "$GCLOUD_SERVICE_KEY" "${CIRCLE_SHA1:8:8}" "<< parameters.gke_project_id >>" "${CIRCLE_PR_NUMBER}" "dev-testing-${CIRCLE_SHA1:8:8}-<< parameters.cluster_id >>"

# integration
  integration-tests:
    parameters:
      cloud_provider:
        type: string
      cluster_id:
        type: string
      test_tags:
        type: string
      test_timeout:
        type: string
        default: "30m"
      gke_project_id:
        type: string
        default: "ci-management"
      namespace:
        type: string
        default: "default"
      use_ipv6:
        type: string
        default: "false"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            sudo ./.circleci/install-yq.sh
      - run:
          command: |
            ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          name: Cache Prep
          command: |
            mkdir terraform
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - restore_cache:
          key: cncf-data-<< parameters.cloud_provider >>-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          command: |
            if [ "x<< parameters.cloud_provider >>" == "xpacket" ]; then
              cp /home/circleci/project/terraform/sshkey* /cncf/data
            else
              if [ "x<< parameters.cloud_provider >>" == "xaws" ]; then
                sudo cp /home/circleci/project/data/aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
              fi
            fi
      - run:
          name: Downloading go deps
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            # export CONTAINER_FORCE_PULL="true"
            cat /home/circleci/project/data/kubeconfig
            ./scripts/prepare-circle-integration-tests.sh
            mkdir -p ~/junit/
            ./scripts/go-mod-download.sh
          no_output_timeout: 40m
      - run:
          name: Running integration tests - <<parameters.test_tags>> with timeout - <<parameters.test_timeout>>
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            gotestsum --junitfile ~/junit/integration-tests.xml -f standard-verbose ./test/integration/... -timeout "<<parameters.test_timeout>>" -tags="<<parameters.test_tags>>"
          no_output_timeout: 40m
      - run:
          when: always
          name: Save postmortem data
          command: |
            make << parameters.cloud_provider >>-download-postmortem
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - store_artifacts:
          path: ~/postmortem
      - run:
          when: always
          name: Dump K8s state
          command: |
            kubectl -n $NSM_NAMESPACE get nodes
            kubectl -n $NSM_NAMESPACE get pods -o wide
            kubectl -n $NSM_NAMESPACE describe pods
      - run:
          name: "Print kubelet log"
          when: on_fail
          command: |
            if [ "x<< parameters.cloud_provider >>" == "xpacket" ]; then
              ssh-add terraform/sshkey
              cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/
              cd ./scripts/terraform && terraform init && cd ../..
              make packet-print-kubelet-log
            elif [ "x<< parameters.cloud_provider >>" == "xaws" ]; then
              export NSM_AWS_SERVICE_SUFFIX="-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
              make aws-print-kubelet-log
            fi
      - run:
          when: on_fail
          no_output_timeout: 40m
          command: |
            if [ "x<< parameters.cloud_provider >>" == "xpacket" ]; then
              cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/
              .circleci/cleanup-packet.sh
            elif [ "x<< parameters.cloud_provider >>" == "xaws" ]; then
              ./scripts/install-kubectl.sh
              .circleci/cleanup-aws.sh
            elif [ "x<< parameters.cloud_provider >>" == "xgke" ]; then
              .circleci/gke/cleanup-gke.sh "$GCLOUD_SERVICE_KEY" "${CIRCLE_SHA1:8:8}" "<< parameters.gke_project_id >>" "${CIRCLE_PR_NUMBER}" "dev-testing-${CIRCLE_SHA1:8:8}-<< parameters.cluster_id >>"
            elif [ "x<< parameters.cloud_provider >>" == "xazure" ]; then
              ./scripts/azure/install-azure-cli.sh
              az login --service-principal --username ${AZURE_SERVICE_PRINCIPAL} --password ${AZURE_SERVICE_PRINCIPAL_SECRET} --tenant ${CIRCLE_AZURE_TENANT}
              export AZURE_CLUSTER_NAME="nsm-ci-cluster-<< parameters.cluster_id >>-${CIRCLE_WORKFLOW_ID}"
              export AZURE_RESOURCE_GROUP=${CIRCLE_AZURE_RESOURCE_GROUP}
              make azure-destroy
            fi
    environment:
      PACKET_CLUSTER_ID: "<< parameters.cluster_id >>"
      CLUSTER_ID: "<< parameters.cluster_id >>"
      KUBECONFIG: /home/circleci/project/data/kubeconfig
      GO111MODULE: "on"
      NSM_NAMESPACE: "<< parameters.namespace >>"
      USE_IPV6: "<< parameters.use_ipv6 >>"

# example
  example-test:
    parameters:
      cloud_provider:
        type: string
      cluster_id:
        type: string
      example:
        type: string
      gke_project_id:
        type: string
        default: "ci-management"
      namespace:
        type: string
        default: "nsm-system"
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            sudo ./.circleci/install-yq.sh
      - run:
          command: |
            ./.circleci/set-nameserver.sh sudo
            sudo apt-get install gettext-base
      - run:
          name: Cache Prep
          command: |
            mkdir terraform
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
      - restore_cache:
          key: terraform-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - restore_cache:
          key: cncf-data-<< parameters.cloud_provider >>-<< parameters.cluster_id >>-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          command: |
            if [ "x<< parameters.cloud_provider >>" == "xpacket" ]; then
              cp /home/circleci/project/terraform/sshkey* /cncf/data
            else
              if [ "x<< parameters.cloud_provider >>" == "xaws" ]; then
                sudo cp /home/circleci/project/data/aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
              fi
            fi
            ./scripts/install-kubectl.sh
      - run:
          name: Deploy infra
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            make k8s-infra-deploy
            kubectl wait -n $NSM_NAMESPACE --timeout=150s --for condition=Ready --all pods
          no_output_timeout: 10m
      - run:
          name: Running example - <<parameters.example>>
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            make k8s-<<parameters.example>>-deploy
            kubectl wait -n $NSM_NAMESPACE --timeout=150s --for condition=Ready --all pods
          no_output_timeout: 10m
      - run:
          name: Verifying example - <<parameters.example>>
          command: |
            make k8s-check
      - run:
          name: Cleanup example - <<parameters.example>>
          command: |
            make k8s-delete
      - run:
          when: always
          name: Save postmortem data
          command: |
            make << parameters.cloud_provider >>-download-postmortem
      - store_artifacts:
          path: ~/postmortem
      - run:
          when: always
          name: Dump K8s state
          command: |
            kubectl -n $NSM_NAMESPACE get nodes
            kubectl -n $NSM_NAMESPACE get pods -o wide
            kubectl -n $NSM_NAMESPACE describe pods
      - run:
          when: on_fail
          command: |
            cp -a /home/circleci/project/terraform/terraform/* ./scripts/terraform/
            .circleci/cleanup-packet.sh
    environment:
      PACKET_CLUSTER_ID: "<< parameters.cluster_id >>"
      CLUSTER_ID: "<< parameters.cluster_id >>"
      KUBECONFIG: /home/circleci/project/data/kubeconfig
      GO111MODULE: "on"
      NSM_NAMESPACE: "<< parameters.namespace >>"
      CLUSTER_RULES_PREFIX: "null"

# build
  build-container:
    parameters:
      container:
        type: string
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export TAG="${COMMIT}"
            make docker-<< parameters.container >>-build
            make docker-<< parameters.container >>-push

# build ready - empty job
  build-container-success:
    docker:
      - image: circleci/golang
    steps:
      - run:
          command: |
            echo "SUCCESS"

# docker push
  docker-push-tag:
    docker:
      - image: circleci/golang
    parameters:
      tag:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export PULL_TAG="${COMMIT}"
            export TAG="<< parameters.tag >>"
            export REPO="networkservicemesh"
            export CONTAINERS=(nsmd nsmd-k8s nsmdp)
            export CONTAINERS=(${CONTAINERS[@]} crossconnect-monitor nsm-init admission-webhook)
            export CONTAINERS=(${CONTAINERS[@]} vppagent-dataplane vppagent-dataplane-dev)
            export CONTAINERS=(${CONTAINERS[@]} test-common vpp-test-common)
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
            for c in ${CONTAINERS[@]}; do
              docker pull ${REPO}/${c}:${PULL_TAG}
              docker tag ${REPO}/${c}:${PULL_TAG} ${REPO}/${c}:${TAG}
              docker push ${REPO}/${c}:${TAG}
            done

# helm
  test-helm-charts:
    docker:
      - image: quay.io/helmpack/chart-testing:v2.3.0
    steps:
      - checkout
      - run:
          name: Install and lint Helm charts
          command: |
            .circleci/helm/test-charts.sh

# workflows
workflows:
  version: 2
  build-and-test:
    jobs:
      - test-sanity-check
      - test-static-code-analysis:
          name: "test-static-code-analysis"
          requires:
            - test-sanity-check
# build
      - build-container:
          name: "build-nsmd"
          container: "nsmd"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-nsmd-k8s"
          container: "nsmd-k8s"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-nsmdp"
          container: "nsmdp"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-admission-webhook"
          container: "admission-webhook"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-crossconnect-monitor"
          container: "crossconnect-monitor"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-test-common"
          container: "test-common"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-vpp-test-common"
          container: "vpp-test-common"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-nsm-init"
          container: "nsm-init"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-vppagent-dataplane"
          container: "vppagent-dataplane"
          requires:
            - test-sanity-check
      - build-container:
          name: "build-vppagent-dataplane-dev"
          container: "vppagent-dataplane-dev"
          requires:
            - test-sanity-check
      - build-container-success:
          requires:
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-admission-webhook
            - build-crossconnect-monitor
            - build-test-common
            - build-vpp-test-common
            - build-nsm-init
            - build-vppagent-dataplane
            - build-vppagent-dataplane-dev

# packet
      - create-packet:
          requires:
            - test-sanity-check
      - deploy-packet:
          name: "deploy-packet-1"
          cluster_id: "1"
          requires:
            - create-packet
      - deploy-packet:
          name: "deploy-packet-2"
          cluster_id: "2"
          requires:
            - create-packet
      - integration-tests:
          name: "test-packet-basic-usecase"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "1"
          test_tags: "basic usecase"
          requires:
            - deploy-packet-1
            - build-container-success
      - integration-tests:
          name: "test-packet-usecase-ipv6"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "1"
          test_tags: "usecase"
          use_ipv6: "true"
          requires:
            - test-packet-basic-usecase
      - integration-tests:
          name: "test-packet-recover"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "2"
          test_tags: "recover"
          test_timeout: "40m"
          requires:
            - deploy-packet-2
            - build-container-success
      - integration-tests:
          name: "test-packet-bench"
          namespace: "nsm-system-integration"
          cloud_provider: "packet"
          cluster_id: "2"
          test_tags: "bench"
          requires:
            - "test-packet-recover"
      - example-test:
          name: "test-packet-example-icmp"
          namespace: "nsm-system"
          cloud_provider: "packet"
          cluster_id: "2"
          example: "icmp"
          requires:
            - "test-packet-bench"
      - example-test:
          name: "test-packet-example-vpn"
          namespace: "nsm-system"
          cloud_provider: "packet"
          cluster_id: "2"
          example: "vpn"
          requires:
            - "test-packet-example-icmp"
      - destroy-packet:
          requires:
            - "test-packet-basic-usecase"
            - "test-packet-usecase-ipv6"
            - "test-packet-recover"
            - "test-packet-bench"
            - "test-packet-example-icmp"
            - "test-packet-example-vpn"

# azure
      - deploy-azure:
          name: "deploy-azure-1"
          cluster_id: "1"
          requires:
            - test-sanity-check
      - deploy-azure:
          name: "deploy-azure-2"
          cluster_id: "2"
          requires:
            - test-sanity-check
      - integration-tests:
          name: "test-azure-basic-usecase"
          cloud_provider: "azure"
          cluster_id: "1"
          test_tags: "basic usecase azure"
          requires:
            - deploy-azure-1
            - build-container-success
      - integration-tests:
          name: "test-azure-recover"
          cloud_provider: "azure"
          cluster_id: "2"
          test_tags: "recover azure"
          test_timeout: "40m"
          requires:
            - deploy-azure-2
            - build-container-success
      - destroy-azure:
          name: "destroy-azure-1"
          cluster_id: "1"
          requires:
            - test-azure-basic-usecase
      - destroy-azure:
          name: "destroy-azure-2"
          cluster_id: "2"
          requires:
            - test-azure-recover

# aws
      - deploy-aws:
          name: "deploy-aws-1"
          cluster_id: "1"
          requires:
            - test-sanity-check
      - deploy-aws:
          name: "deploy-aws-2"
          cluster_id: "2"
          requires:
            - test-sanity-check
      - destroy-aws:
          name: "destroy-aws-1"
          cluster_id: "1"
          requires:
            - test-aws-basic-usecase
      - destroy-aws:
          name: "destroy-aws-2"
          cluster_id: "2"
          requires:
            - test-aws-recover
      - integration-tests:
          name: "test-aws-basic-usecase"
          cloud_provider: "aws"
          cluster_id: "1"
          test_tags: "basic usecase aws"
          requires:
            - deploy-aws-1
            - build-container-success
      - integration-tests:
          name: "test-aws-recover"
          cloud_provider: "aws"
          cluster_id: "2"
          test_tags: "recover aws"
          test_timeout: "40m"
          requires:
            - deploy-aws-2
            - build-container-success

# gke
      - deploy-gke:
          cluster_id: "1"
          name: "deploy-gke-1"
          requires:
            - test-sanity-check
      - deploy-gke:
          cluster_id: "2"
          name: "deploy-gke-2"
          requires:
            - test-sanity-check
      - integration-tests:
          name: "test-gke-basic-usecase"
          cloud_provider: "gke"
          cluster_id: "1"
          test_tags: "basic usecase gke"
          requires:
            - test-sanity-check
            - "deploy-gke-1"
            - build-container-success
      - integration-tests:
          name: "test-gke-recover"
          cloud_provider: "gke"
          cluster_id: "2"
          test_tags: "recover gke"
          test_timeout: "40m"
          requires:
            - test-sanity-check
            - "deploy-gke-2"
            - build-container-success
      - destroy-gke:
          name: "destroy-gke-1"
          cluster_id: "1"
          requires:
            - "deploy-gke-1"
            - "test-gke-basic-usecase"
      - destroy-gke:
          name: "destroy-gke-2"
          cluster_id: "2"
          requires:
            - "deploy-gke-2"
            - "test-gke-recover"

# helm
      - test-helm-charts:
          name: "test-helm-charts"
          requires:
            - test-sanity-check

# push
      - docker-push-tag:
          tag: "latest"
          requires:
            - destroy-packet
          filters:
            branches:
              only: master
