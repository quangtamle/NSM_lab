// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flow/layers/dns.proto

package layers // import "github.com/skydive-project/skydive/flow/layers"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// DNSMX specifies the mail server responsible for accepting email messages on behalf of a domain name.
type DNSMX struct {
	Preference uint16 `protobuf:"varint,1,opt,name=preference,proto3,casttype=uint16" json:"preference,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DNSMX) Reset()         { *m = DNSMX{} }
func (m *DNSMX) String() string { return proto.CompactTextString(m) }
func (*DNSMX) ProtoMessage()    {}
func (*DNSMX) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_f3be269402d38da5, []int{0}
}
func (m *DNSMX) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSMX) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSMX.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DNSMX) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSMX.Merge(dst, src)
}
func (m *DNSMX) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DNSMX) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSMX.DiscardUnknown(m)
}

var xxx_messageInfo_DNSMX proto.InternalMessageInfo

// DNSQuestion stores the question for a DNS query
type DNSQuestion struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Class string `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
}

func (m *DNSQuestion) Reset()         { *m = DNSQuestion{} }
func (m *DNSQuestion) String() string { return proto.CompactTextString(m) }
func (*DNSQuestion) ProtoMessage()    {}
func (*DNSQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_f3be269402d38da5, []int{1}
}
func (m *DNSQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DNSQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSQuestion.Merge(dst, src)
}
func (m *DNSQuestion) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DNSQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_DNSQuestion proto.InternalMessageInfo

// DNSResourceRecord holds resource records for DNS structs
type DNSResourceRecord struct {
	Name       string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       string    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Class      string    `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	TTL        uint32    `protobuf:"varint,4,opt,name=ttl,proto3" json:"TTL,omitempty"`
	DataLength uint16    `protobuf:"varint,5,opt,name=data_length,json=dataLength,proto3,casttype=uint16" json:"data_length,omitempty"`
	IP         string    `protobuf:"bytes,6,opt,name=ip,proto3" json:"IP,omitempty"`
	NS         string    `protobuf:"bytes,7,opt,name=ns,proto3" json:"NS,omitempty"`
	CNAME      string    `protobuf:"bytes,8,opt,name=cname,proto3" json:"CNAME,omitempty"`
	PTR        string    `protobuf:"bytes,9,opt,name=ptr,proto3" json:"PTR,omitempty"`
	TXTs       []string  `protobuf:"bytes,10,rep,name=txts" json:"TXTs,omitempty"`
	SOA        *DNSSOA   `protobuf:"bytes,11,opt,name=soa" json:"SOA,omitempty"`
	SRV        *DNSSRV   `protobuf:"bytes,12,opt,name=srv" json:"SRV,omitempty"`
	MX         *DNSMX    `protobuf:"bytes,13,opt,name=mx" json:"MX,omitempty"`
	OPT        []*DNSOPT `protobuf:"bytes,14,rep,name=opt" json:"OPT,omitempty"`
}

func (m *DNSResourceRecord) Reset()         { *m = DNSResourceRecord{} }
func (m *DNSResourceRecord) String() string { return proto.CompactTextString(m) }
func (*DNSResourceRecord) ProtoMessage()    {}
func (*DNSResourceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_f3be269402d38da5, []int{2}
}
func (m *DNSResourceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSResourceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSResourceRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DNSResourceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSResourceRecord.Merge(dst, src)
}
func (m *DNSResourceRecord) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DNSResourceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSResourceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DNSResourceRecord proto.InternalMessageInfo

// DNSSOA is a type of resource record in the Domain Name System (DNS) containing administrative information
// about the zone, especially regarding zone transfers.
type DNSSOA struct {
	MName   string `protobuf:"bytes,1,opt,name=mname,proto3" json:"MName,omitempty"`
	RName   string `protobuf:"bytes,2,opt,name=rname,proto3" json:"RName,omitempty"`
	Serial  uint32 `protobuf:"varint,3,opt,name=serial,proto3" json:"serial,omitempty"`
	Refresh uint32 `protobuf:"varint,4,opt,name=refresh,proto3" json:"refresh,omitempty"`
	Retry   uint32 `protobuf:"varint,5,opt,name=retry,proto3" json:"retry,omitempty"`
	Expire  uint32 `protobuf:"varint,6,opt,name=expire,proto3" json:"expire,omitempty"`
	Minimum uint32 `protobuf:"varint,7,opt,name=minimum,proto3" json:"minimum,omitempty"`
}

func (m *DNSSOA) Reset()         { *m = DNSSOA{} }
func (m *DNSSOA) String() string { return proto.CompactTextString(m) }
func (*DNSSOA) ProtoMessage()    {}
func (*DNSSOA) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_f3be269402d38da5, []int{3}
}
func (m *DNSSOA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSSOA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSSOA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DNSSOA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSOA.Merge(dst, src)
}
func (m *DNSSOA) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DNSSOA) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSOA.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSOA proto.InternalMessageInfo

// DNSSRV is a specification of data in the Domain Name System defining the
// location, i.e. the hostname and port number, of servers for specified services.
type DNSSRV struct {
	Priority uint16 `protobuf:"varint,1,opt,name=priority,proto3,casttype=uint16" json:"priority,omitempty"`
	Weight   uint16 `protobuf:"varint,2,opt,name=weight,proto3,casttype=uint16" json:"weight,omitempty"`
	Port     uint16 `protobuf:"varint,3,opt,name=port,proto3,casttype=uint16" json:"port,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DNSSRV) Reset()         { *m = DNSSRV{} }
func (m *DNSSRV) String() string { return proto.CompactTextString(m) }
func (*DNSSRV) ProtoMessage()    {}
func (*DNSSRV) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_f3be269402d38da5, []int{4}
}
func (m *DNSSRV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSSRV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSSRV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DNSSRV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSSRV.Merge(dst, src)
}
func (m *DNSSRV) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DNSSRV) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSSRV.DiscardUnknown(m)
}

var xxx_messageInfo_DNSSRV proto.InternalMessageInfo

// DNSOPT is a DNS Option, see RFC6891, section 6.1.2
type DNSOPT struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"Code,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"Data,omitempty"`
}

func (m *DNSOPT) Reset()         { *m = DNSOPT{} }
func (m *DNSOPT) String() string { return proto.CompactTextString(m) }
func (*DNSOPT) ProtoMessage()    {}
func (*DNSOPT) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_f3be269402d38da5, []int{5}
}
func (m *DNSOPT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNSOPT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNSOPT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DNSOPT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSOPT.Merge(dst, src)
}
func (m *DNSOPT) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DNSOPT) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSOPT.DiscardUnknown(m)
}

var xxx_messageInfo_DNSOPT proto.InternalMessageInfo

// LayerDNS wrapper to generate extra layer
type DNS struct {
	ID           uint16              `protobuf:"varint,1,opt,name=id,proto3,casttype=uint16" json:"ID,omitempty"`
	QR           bool                `protobuf:"varint,2,opt,name=qr,proto3" json:"QR,omitempty"`
	OpCode       string              `protobuf:"bytes,3,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
	AA           bool                `protobuf:"varint,4,opt,name=aa,proto3" json:"AA,omitempty"`
	TC           bool                `protobuf:"varint,5,opt,name=tc,proto3" json:"TC,omitempty"`
	RD           bool                `protobuf:"varint,6,opt,name=rd,proto3" json:"RD,omitempty"`
	RA           bool                `protobuf:"varint,7,opt,name=ra,proto3" json:"RA,omitempty"`
	Z            uint8               `protobuf:"varint,8,opt,name=z,proto3,casttype=uint8" json:"z,omitempty"`
	ResponseCode string              `protobuf:"bytes,9,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	QDCount      uint16              `protobuf:"varint,10,opt,name=qdcount,proto3,casttype=uint16" json:"QDCount,omitempty"`
	ANCount      uint16              `protobuf:"varint,11,opt,name=ancount,proto3,casttype=uint16" json:"ANCount,omitempty"`
	NSCount      uint16              `protobuf:"varint,12,opt,name=nscount,proto3,casttype=uint16" json:"NSCount,omitempty"`
	ARCount      uint16              `protobuf:"varint,13,opt,name=arcount,proto3,casttype=uint16" json:"ARCount,omitempty"`
	Questions    []DNSQuestion       `protobuf:"bytes,14,rep,name=questions" json:"questions,omitempty"`
	Answers      []DNSResourceRecord `protobuf:"bytes,15,rep,name=answers" json:"answers,omitempty"`
	Authorities  []DNSResourceRecord `protobuf:"bytes,16,rep,name=authorities" json:"authorities,omitempty"`
	Additionals  []DNSResourceRecord `protobuf:"bytes,17,rep,name=additionals" json:"additionals,omitempty"`
	Timestamp    time.Time           `protobuf:"bytes,18,opt,name=timestamp,stdtime" json:"timestamp"`
}

func (m *DNS) Reset()         { *m = DNS{} }
func (m *DNS) String() string { return proto.CompactTextString(m) }
func (*DNS) ProtoMessage()    {}
func (*DNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_dns_f3be269402d38da5, []int{6}
}
func (m *DNS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DNS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNS.Merge(dst, src)
}
func (m *DNS) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DNS) XXX_DiscardUnknown() {
	xxx_messageInfo_DNS.DiscardUnknown(m)
}

var xxx_messageInfo_DNS proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DNSMX)(nil), "layers.DNSMX")
	proto.RegisterType((*DNSQuestion)(nil), "layers.DNSQuestion")
	proto.RegisterType((*DNSResourceRecord)(nil), "layers.DNSResourceRecord")
	proto.RegisterType((*DNSSOA)(nil), "layers.DNSSOA")
	proto.RegisterType((*DNSSRV)(nil), "layers.DNSSRV")
	proto.RegisterType((*DNSOPT)(nil), "layers.DNSOPT")
	proto.RegisterType((*DNS)(nil), "layers.DNS")
}
func (m *DNSMX) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSMX) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Preference != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Preference))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *DNSQuestion) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSQuestion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Class) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Class)))
		i += copy(dAtA[i:], m.Class)
	}
	return i, nil
}

func (m *DNSResourceRecord) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSResourceRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Class) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Class)))
		i += copy(dAtA[i:], m.Class)
	}
	if m.TTL != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.TTL))
	}
	if m.DataLength != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.DataLength))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if len(m.NS) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.NS)))
		i += copy(dAtA[i:], m.NS)
	}
	if len(m.CNAME) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.CNAME)))
		i += copy(dAtA[i:], m.CNAME)
	}
	if len(m.PTR) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.PTR)))
		i += copy(dAtA[i:], m.PTR)
	}
	if len(m.TXTs) > 0 {
		for _, s := range m.TXTs {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.SOA != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.SOA.ProtoSize()))
		n1, err := m.SOA.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SRV != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.SRV.ProtoSize()))
		n2, err := m.SRV.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.MX != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.MX.ProtoSize()))
		n3, err := m.MX.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.OPT) > 0 {
		for _, msg := range m.OPT {
			dAtA[i] = 0x72
			i++
			i = encodeVarintDns(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DNSSOA) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSSOA) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.MName)))
		i += copy(dAtA[i:], m.MName)
	}
	if len(m.RName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.RName)))
		i += copy(dAtA[i:], m.RName)
	}
	if m.Serial != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Serial))
	}
	if m.Refresh != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Refresh))
	}
	if m.Retry != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Retry))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Expire))
	}
	if m.Minimum != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Minimum))
	}
	return i, nil
}

func (m *DNSSRV) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSSRV) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Priority))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Weight))
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Port))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *DNSOPT) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSOPT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *DNS) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.ID))
	}
	if m.QR {
		dAtA[i] = 0x10
		i++
		if m.QR {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OpCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.OpCode)))
		i += copy(dAtA[i:], m.OpCode)
	}
	if m.AA {
		dAtA[i] = 0x20
		i++
		if m.AA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TC {
		dAtA[i] = 0x28
		i++
		if m.TC {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RD {
		dAtA[i] = 0x30
		i++
		if m.RD {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RA {
		dAtA[i] = 0x38
		i++
		if m.RA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Z != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.Z))
	}
	if len(m.ResponseCode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDns(dAtA, i, uint64(len(m.ResponseCode)))
		i += copy(dAtA[i:], m.ResponseCode)
	}
	if m.QDCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.QDCount))
	}
	if m.ANCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.ANCount))
	}
	if m.NSCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.NSCount))
	}
	if m.ARCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintDns(dAtA, i, uint64(m.ARCount))
	}
	if len(m.Questions) > 0 {
		for _, msg := range m.Questions {
			dAtA[i] = 0x72
			i++
			i = encodeVarintDns(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Answers) > 0 {
		for _, msg := range m.Answers {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintDns(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Authorities) > 0 {
		for _, msg := range m.Authorities {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintDns(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Additionals) > 0 {
		for _, msg := range m.Additionals {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintDns(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintDns(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func encodeVarintDns(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DNSMX) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Preference != 0 {
		n += 1 + sovDns(uint64(m.Preference))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	return n
}

func (m *DNSQuestion) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	return n
}

func (m *DNSResourceRecord) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.Class)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovDns(uint64(m.TTL))
	}
	if m.DataLength != 0 {
		n += 1 + sovDns(uint64(m.DataLength))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.NS)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.CNAME)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.PTR)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	if len(m.TXTs) > 0 {
		for _, s := range m.TXTs {
			l = len(s)
			n += 1 + l + sovDns(uint64(l))
		}
	}
	if m.SOA != nil {
		l = m.SOA.ProtoSize()
		n += 1 + l + sovDns(uint64(l))
	}
	if m.SRV != nil {
		l = m.SRV.ProtoSize()
		n += 1 + l + sovDns(uint64(l))
	}
	if m.MX != nil {
		l = m.MX.ProtoSize()
		n += 1 + l + sovDns(uint64(l))
	}
	if len(m.OPT) > 0 {
		for _, e := range m.OPT {
			l = e.ProtoSize()
			n += 1 + l + sovDns(uint64(l))
		}
	}
	return n
}

func (m *DNSSOA) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MName)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.RName)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	if m.Serial != 0 {
		n += 1 + sovDns(uint64(m.Serial))
	}
	if m.Refresh != 0 {
		n += 1 + sovDns(uint64(m.Refresh))
	}
	if m.Retry != 0 {
		n += 1 + sovDns(uint64(m.Retry))
	}
	if m.Expire != 0 {
		n += 1 + sovDns(uint64(m.Expire))
	}
	if m.Minimum != 0 {
		n += 1 + sovDns(uint64(m.Minimum))
	}
	return n
}

func (m *DNSSRV) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovDns(uint64(m.Priority))
	}
	if m.Weight != 0 {
		n += 1 + sovDns(uint64(m.Weight))
	}
	if m.Port != 0 {
		n += 1 + sovDns(uint64(m.Port))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	return n
}

func (m *DNSOPT) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	return n
}

func (m *DNS) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDns(uint64(m.ID))
	}
	if m.QR {
		n += 2
	}
	l = len(m.OpCode)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	if m.AA {
		n += 2
	}
	if m.TC {
		n += 2
	}
	if m.RD {
		n += 2
	}
	if m.RA {
		n += 2
	}
	if m.Z != 0 {
		n += 1 + sovDns(uint64(m.Z))
	}
	l = len(m.ResponseCode)
	if l > 0 {
		n += 1 + l + sovDns(uint64(l))
	}
	if m.QDCount != 0 {
		n += 1 + sovDns(uint64(m.QDCount))
	}
	if m.ANCount != 0 {
		n += 1 + sovDns(uint64(m.ANCount))
	}
	if m.NSCount != 0 {
		n += 1 + sovDns(uint64(m.NSCount))
	}
	if m.ARCount != 0 {
		n += 1 + sovDns(uint64(m.ARCount))
	}
	if len(m.Questions) > 0 {
		for _, e := range m.Questions {
			l = e.ProtoSize()
			n += 1 + l + sovDns(uint64(l))
		}
	}
	if len(m.Answers) > 0 {
		for _, e := range m.Answers {
			l = e.ProtoSize()
			n += 1 + l + sovDns(uint64(l))
		}
	}
	if len(m.Authorities) > 0 {
		for _, e := range m.Authorities {
			l = e.ProtoSize()
			n += 2 + l + sovDns(uint64(l))
		}
	}
	if len(m.Additionals) > 0 {
		for _, e := range m.Additionals {
			l = e.ProtoSize()
			n += 2 + l + sovDns(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 2 + l + sovDns(uint64(l))
	return n
}

func sovDns(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDns(x uint64) (n int) {
	return sovDns(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DNSMX) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSMX: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSMX: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preference", wireType)
			}
			m.Preference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Preference |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSResourceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSResourceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSResourceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Class = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTL |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLength", wireType)
			}
			m.DataLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLength |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CNAME", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CNAME = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PTR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PTR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXTs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TXTs = append(m.TXTs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SOA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SOA == nil {
				m.SOA = &DNSSOA{}
			}
			if err := m.SOA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SRV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SRV == nil {
				m.SRV = &DNSSRV{}
			}
			if err := m.SRV.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MX", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MX == nil {
				m.MX = &DNSMX{}
			}
			if err := m.MX.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OPT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OPT = append(m.OPT, &DNSOPT{})
			if err := m.OPT[len(m.OPT)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSSOA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSSOA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSSOA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			m.Serial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serial |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh", wireType)
			}
			m.Refresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refresh |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			m.Retry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retry |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSSRV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSSRV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSSRV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSOPT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSOPT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSOPT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QR = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AA = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TC = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RD", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RD = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RA = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			m.Z = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Z |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QDCount", wireType)
			}
			m.QDCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QDCount |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ANCount", wireType)
			}
			m.ANCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ANCount |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSCount", wireType)
			}
			m.NSCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NSCount |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ARCount", wireType)
			}
			m.ARCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ARCount |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Questions = append(m.Questions, DNSQuestion{})
			if err := m.Questions[len(m.Questions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = append(m.Answers, DNSResourceRecord{})
			if err := m.Answers[len(m.Answers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorities = append(m.Authorities, DNSResourceRecord{})
			if err := m.Authorities[len(m.Authorities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Additionals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Additionals = append(m.Additionals, DNSResourceRecord{})
			if err := m.Additionals[len(m.Additionals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDns
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDns(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDns
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDns
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDns
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDns(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDns = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDns   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("flow/layers/dns.proto", fileDescriptor_dns_f3be269402d38da5) }

var fileDescriptor_dns_f3be269402d38da5 = []byte{
	// 1154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0xdb, 0xb6,
	0x1b, 0x8e, 0x6c, 0xc7, 0x49, 0x98, 0x38, 0xfd, 0x85, 0xfd, 0xb5, 0x55, 0xb3, 0xcd, 0x0a, 0x3a,
	0xa0, 0x08, 0xba, 0xd5, 0xd9, 0x3a, 0x6c, 0x18, 0x7a, 0xb3, 0xe3, 0x1d, 0x0a, 0xc4, 0xb2, 0x43,
	0x0b, 0x41, 0xd0, 0x4b, 0xa1, 0x5a, 0x8c, 0xa3, 0xcd, 0x12, 0x15, 0x92, 0x6e, 0x93, 0x7e, 0x82,
	0x9d, 0x86, 0x7e, 0x84, 0x7e, 0x9c, 0x1e, 0x7b, 0xdc, 0x49, 0x1b, 0x9c, 0x5b, 0x4e, 0x3b, 0x77,
	0x97, 0x81, 0x2f, 0x29, 0x8b, 0x6e, 0x83, 0x6d, 0xc0, 0x4e, 0xe2, 0x9f, 0xe7, 0x79, 0x5e, 0x3e,
	0xe4, 0xfb, 0x52, 0x44, 0xb7, 0x4e, 0x26, 0xec, 0xe5, 0xde, 0x24, 0xbc, 0xa0, 0x5c, 0xec, 0x45,
	0xa9, 0x68, 0x65, 0x9c, 0x49, 0x86, 0xeb, 0x7a, 0x64, 0xfb, 0xe1, 0x38, 0x96, 0xa7, 0xd3, 0xe7,
	0xad, 0x11, 0x4b, 0xf6, 0xc6, 0x6c, 0xcc, 0xf6, 0x60, 0xfa, 0xf9, 0xf4, 0x04, 0x7a, 0xd0, 0x81,
	0x96, 0xa6, 0x6d, 0x7b, 0x63, 0xc6, 0xc6, 0x13, 0x5a, 0xa2, 0x64, 0x9c, 0x50, 0x21, 0xc3, 0x24,
	0xd3, 0x80, 0x7b, 0x3d, 0xb4, 0xdc, 0xf5, 0x87, 0xbd, 0x63, 0xfc, 0x00, 0xa1, 0x8c, 0xd3, 0x13,
	0xca, 0x69, 0x3a, 0xa2, 0xae, 0xb3, 0xe3, 0xec, 0x36, 0x3a, 0xe8, 0x7d, 0xee, 0xd5, 0xa7, 0x71,
	0x2a, 0xbf, 0xfe, 0x8e, 0x58, 0xb3, 0x18, 0xa3, 0x5a, 0x1a, 0x26, 0xd4, 0xad, 0xec, 0x38, 0xbb,
	0x6b, 0x04, 0xda, 0x8f, 0x6b, 0x3f, 0xbf, 0xf1, 0x96, 0xee, 0x1d, 0xa2, 0xf5, 0xae, 0x3f, 0x3c,
	0x9c, 0x52, 0x21, 0x63, 0x96, 0xce, 0x81, 0x4e, 0x09, 0x54, 0x63, 0xf2, 0x22, 0x9b, 0x93, 0x55,
	0x1b, 0xff, 0x1f, 0x2d, 0x8f, 0x26, 0xa1, 0x10, 0x6e, 0x15, 0x06, 0x75, 0xc7, 0x48, 0xfe, 0x59,
	0x43, 0x5b, 0x5d, 0x7f, 0x48, 0xa8, 0x60, 0x53, 0x3e, 0xa2, 0x84, 0x8e, 0x18, 0x8f, 0xfe, 0x9b,
	0x32, 0x7e, 0x80, 0xaa, 0x52, 0x4e, 0xdc, 0x1a, 0xb8, 0x74, 0x67, 0xb9, 0x57, 0x0d, 0x82, 0x83,
	0xab, 0xdc, 0x6b, 0x04, 0xc1, 0xc1, 0x97, 0x2c, 0x89, 0x25, 0x4d, 0x32, 0x79, 0x41, 0x14, 0x08,
	0x7f, 0x81, 0xd6, 0xa3, 0x50, 0x86, 0xcf, 0x26, 0x34, 0x1d, 0xcb, 0x53, 0x77, 0xf9, 0xe3, 0x9d,
	0x51, 0xd3, 0x07, 0x30, 0x8b, 0xef, 0xa3, 0x4a, 0x9c, 0xb9, 0x75, 0x15, 0xab, 0x73, 0x7b, 0x96,
	0x7b, 0x95, 0x27, 0x83, 0xab, 0xdc, 0xdb, 0x78, 0x32, 0xb0, 0x54, 0x2b, 0x71, 0xa6, 0x70, 0xa9,
	0x70, 0x57, 0x4a, 0x9c, 0x3f, 0x54, 0x38, 0x7f, 0x68, 0xe3, 0x52, 0x81, 0x1f, 0xa1, 0xe5, 0x11,
	0xf8, 0x5c, 0x05, 0xe8, 0xa7, 0xb3, 0xdc, 0x5b, 0xde, 0xf7, 0xdb, 0xbd, 0x1f, 0xae, 0x72, 0xef,
	0x06, 0x34, 0x2c, 0x82, 0x86, 0x2a, 0x73, 0x99, 0xe4, 0xee, 0x1a, 0x30, 0xc0, 0xdc, 0x20, 0x20,
	0xca, 0xdc, 0x20, 0x20, 0xb6, 0xb9, 0x4c, 0x72, 0xdc, 0x42, 0x35, 0x79, 0x2e, 0x85, 0x8b, 0x76,
	0xaa, 0xbb, 0x6b, 0x9d, 0xed, 0x59, 0xee, 0xd5, 0x82, 0xe3, 0x40, 0x5c, 0xe5, 0xde, 0xa6, 0xfa,
	0x5a, 0x70, 0xc0, 0xe1, 0xc7, 0xa8, 0x2a, 0x58, 0xe8, 0xae, 0xef, 0x38, 0xbb, 0xeb, 0x8f, 0x36,
	0x5b, 0x3a, 0x29, 0x5b, 0x5d, 0x7f, 0x38, 0xec, 0xb7, 0x75, 0xac, 0x61, 0xbf, 0xad, 0x62, 0x0d,
	0xfb, 0x6d, 0x3b, 0x96, 0x60, 0x21, 0x70, 0xf9, 0x0b, 0x77, 0xe3, 0x63, 0x2e, 0x39, 0x32, 0x5c,
	0x72, 0x04, 0x5c, 0x72, 0xb4, 0xc0, 0xe5, 0x2f, 0xf0, 0xb7, 0xa8, 0x92, 0x9c, 0xbb, 0x0d, 0xa0,
	0x36, 0x2c, 0x6a, 0xef, 0x58, 0x6f, 0x5f, 0xef, 0x58, 0x6d, 0x5f, 0xef, 0xd8, 0xde, 0xbe, 0xe4,
	0x5c, 0x85, 0x64, 0x99, 0x74, 0x37, 0x77, 0xaa, 0x1f, 0x84, 0xec, 0x0f, 0x02, 0x1d, 0xb2, 0x3f,
	0x08, 0x54, 0xc8, 0xfe, 0x20, 0xb0, 0x43, 0xb2, 0x4c, 0x9a, 0xec, 0xfb, 0xc3, 0x41, 0x75, 0x6d,
	0x4f, 0x9d, 0x45, 0x52, 0xe6, 0x9c, 0x3e, 0x8b, 0x9e, 0x1f, 0x26, 0x54, 0x9d, 0x05, 0x34, 0xec,
	0xb3, 0x00, 0xa8, 0xe2, 0xf0, 0xb2, 0x54, 0x34, 0x87, 0x14, 0x1c, 0xf2, 0x21, 0x07, 0xa0, 0xf8,
	0x36, 0xaa, 0x0b, 0xca, 0xe3, 0x70, 0x02, 0x39, 0xdb, 0x20, 0xa6, 0x87, 0x5d, 0xb4, 0xc2, 0xe9,
	0x09, 0xa7, 0xe2, 0x54, 0x27, 0x2e, 0x29, 0xba, 0x2a, 0xc9, 0x39, 0x95, 0xfc, 0x42, 0x27, 0x27,
	0xd1, 0x1d, 0xa5, 0x43, 0xcf, 0xb3, 0x98, 0x53, 0xc8, 0xc7, 0x06, 0x31, 0x3d, 0xa5, 0x93, 0xc4,
	0x69, 0x9c, 0x4c, 0x13, 0x48, 0xc0, 0x06, 0x29, 0xba, 0xc6, 0xf2, 0x2f, 0xc6, 0x32, 0x39, 0xc2,
	0xf7, 0xd1, 0x6a, 0xc6, 0x63, 0xc6, 0x63, 0x79, 0x71, 0xcd, 0x95, 0x30, 0x9f, 0xc3, 0xf7, 0x50,
	0xfd, 0x25, 0x8d, 0xc7, 0xa7, 0x12, 0x7c, 0x2e, 0xa2, 0xcc, 0x0c, 0x6e, 0xa2, 0x5a, 0xc6, 0xb8,
	0xd4, 0xa6, 0x16, 0x10, 0x30, 0x3e, 0xaf, 0xe8, 0xda, 0x47, 0x97, 0x4a, 0x0a, 0xeb, 0xe9, 0x0f,
	0x02, 0x95, 0xae, 0x23, 0x16, 0x15, 0x27, 0x00, 0xe9, 0xba, 0xcf, 0x22, 0xb5, 0x99, 0x9b, 0xea,
	0x6b, 0xa7, 0xab, 0xc2, 0x29, 0xbc, 0x2a, 0x4e, 0xb3, 0xfb, 0x80, 0xef, 0x86, 0x32, 0x54, 0x78,
	0xf5, 0xb5, 0xf1, 0x0a, 0x67, 0xe2, 0xbd, 0x5e, 0x45, 0xd5, 0xae, 0x3f, 0xc4, 0x5f, 0xa1, 0x4a,
	0x1c, 0x19, 0xdf, 0x3b, 0x50, 0xcc, 0x5d, 0x28, 0xe6, 0x6e, 0xc9, 0xb3, 0x5c, 0x54, 0xe2, 0x48,
	0x95, 0xf5, 0x19, 0x87, 0x68, 0xab, 0x3a, 0x2f, 0x0f, 0x55, 0xe1, 0x6d, 0x1c, 0xda, 0x75, 0x57,
	0x39, 0xe3, 0xf8, 0x0e, 0x5a, 0x61, 0xd9, 0x33, 0xb0, 0xa2, 0xef, 0xa5, 0x3a, 0xcb, 0x94, 0x01,
	0x25, 0x10, 0x86, 0xb0, 0x05, 0x46, 0xa0, 0xad, 0xaa, 0x69, 0xa3, 0x6d, 0x17, 0x53, 0x25, 0x0c,
	0x15, 0x4e, 0x8e, 0xe0, 0xb8, 0x0d, 0x2e, 0xd8, 0x57, 0xb8, 0x60, 0xdf, 0xc6, 0xc9, 0x91, 0xc2,
	0xf1, 0x08, 0xce, 0xdf, 0xe0, 0x08, 0x58, 0x20, 0x5d, 0x1b, 0xc7, 0x61, 0xe1, 0x3c, 0x84, 0x74,
	0x28, 0x70, 0x10, 0x97, 0x2c, 0xc4, 0xe5, 0x21, 0xbe, 0x83, 0x9c, 0x57, 0x70, 0x17, 0x35, 0x3a,
	0x6b, 0xef, 0x73, 0x6f, 0x59, 0x79, 0xff, 0x9e, 0x38, 0xaf, 0xf0, 0xe7, 0xa8, 0xc1, 0xa9, 0xc8,
	0x58, 0x2a, 0xa8, 0xf6, 0x05, 0xd7, 0x0f, 0xd9, 0x28, 0x06, 0xc1, 0x5d, 0x17, 0xad, 0x9c, 0x45,
	0x23, 0x36, 0x4d, 0xa5, 0x8b, 0x40, 0xe3, 0xc1, 0x2c, 0xf7, 0x56, 0x0e, 0xbb, 0xfb, 0x6a, 0xe8,
	0x2a, 0xf7, 0xb6, 0x4c, 0xf3, 0xda, 0xfd, 0x2d, 0xa8, 0x4a, 0x25, 0x4c, 0xb5, 0xca, 0x7a, 0xa9,
	0xd2, 0xf6, 0xe7, 0x2a, 0xa6, 0x79, 0xbd, 0x8a, 0xa1, 0x2a, 0x95, 0x54, 0x68, 0x95, 0x8d, 0x52,
	0xc5, 0x1f, 0xce, 0x55, 0x4c, 0xf3, 0x7a, 0x15, 0x43, 0x85, 0xb5, 0x70, 0xad, 0xd2, 0xb0, 0xd6,
	0x42, 0xca, 0xb5, 0x90, 0xbf, 0x5b, 0x8b, 0xa6, 0x62, 0x1f, 0xad, 0x9d, 0x99, 0x5f, 0xa6, 0x30,
	0x97, 0xd5, 0x4d, 0xeb, 0xb2, 0x2a, 0x7e, 0xa7, 0x9d, 0x4f, 0xde, 0xe6, 0xde, 0xd2, 0x55, 0xee,
	0xdd, 0x9c, 0xa3, 0xad, 0xe3, 0x29, 0x25, 0xb0, 0xaf, 0x76, 0x48, 0xbc, 0xa4, 0x5c, 0xb8, 0x37,
	0x40, 0xed, 0xae, 0xa5, 0xb6, 0xf8, 0x23, 0xed, 0xdc, 0x35, 0x9a, 0x5b, 0x86, 0x61, 0x29, 0x16,
	0x22, 0xf8, 0x29, 0x5a, 0x0f, 0xa7, 0xf2, 0x54, 0xd5, 0x7a, 0x4c, 0x85, 0xfb, 0xbf, 0x7f, 0xd2,
	0xfc, 0xcc, 0x68, 0xde, 0xb2, 0x58, 0x96, 0xae, 0x2d, 0x06, 0xda, 0x51, 0x14, 0xab, 0x85, 0x87,
	0x13, 0xe1, 0x6e, 0xfd, 0x7b, 0xed, 0x92, 0xb5, 0xa0, 0x5d, 0x0e, 0xe3, 0x0e, 0x5a, 0x9b, 0xbf,
	0x77, 0x5c, 0x0c, 0x3f, 0x8f, 0xed, 0x96, 0x7e, 0x11, 0xb5, 0x8a, 0x17, 0x51, 0x2b, 0x28, 0x10,
	0x9d, 0x55, 0x25, 0xfd, 0xfa, 0x37, 0xcf, 0x21, 0x25, 0x4d, 0x5f, 0x09, 0x9d, 0x83, 0xb7, 0xb3,
	0xa6, 0xf3, 0x6e, 0xd6, 0x74, 0x7e, 0x9f, 0x35, 0x97, 0x5e, 0x5f, 0x36, 0x97, 0xde, 0x5c, 0x36,
	0x9d, 0x77, 0x97, 0xcd, 0xa5, 0x5f, 0x2f, 0x9b, 0x4b, 0x4f, 0x5b, 0xd6, 0xa3, 0x4c, 0xfc, 0x74,
	0x11, 0xc5, 0x2f, 0xe8, 0xc3, 0x8c, 0xb3, 0x1f, 0xe9, 0x48, 0x16, 0xfd, 0x3d, 0xeb, 0x59, 0xf7,
	0xbc, 0x0e, 0xc1, 0xbf, 0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x6b, 0xf2, 0xf2, 0xec, 0x09,
	0x00, 0x00,
}
