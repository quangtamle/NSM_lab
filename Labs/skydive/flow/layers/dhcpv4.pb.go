// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flow/layers/dhcpv4.proto

package layers // import "github.com/skydive-project/skydive/flow/layers"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// LayerDHCPv4 wrapper to generate extra layer
type DHCPv4 struct {
	Contents     []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	Payload      []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	HardwareLen  uint8  `protobuf:"varint,3,opt,name=hardware_len,json=hardwareLen,proto3,casttype=uint8" json:"hardware_len,omitempty"`
	HardwareOpts uint8  `protobuf:"varint,4,opt,name=hardware_opts,json=hardwareOpts,proto3,casttype=uint8" json:"hardware_opts,omitempty"`
	Xid          uint32 `protobuf:"varint,5,opt,name=xid,proto3" json:"xid,omitempty"`
	Secs         uint16 `protobuf:"varint,6,opt,name=secs,proto3,casttype=uint16" json:"secs,omitempty"`
	Flags        uint16 `protobuf:"varint,7,opt,name=flags,proto3,casttype=uint16" json:"flags,omitempty"`
	ServerName   []byte `protobuf:"bytes,8,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	File         []byte `protobuf:"bytes,9,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *DHCPv4) Reset()         { *m = DHCPv4{} }
func (m *DHCPv4) String() string { return proto.CompactTextString(m) }
func (*DHCPv4) ProtoMessage()    {}
func (*DHCPv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcpv4_93a7f30c1e5d1c0e, []int{0}
}
func (m *DHCPv4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPv4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DHCPv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPv4.Merge(dst, src)
}
func (m *DHCPv4) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DHCPv4) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPv4.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPv4 proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DHCPv4)(nil), "layers.DHCPv4")
}
func (m *DHCPv4) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPv4) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(len(m.Contents)))
		i += copy(dAtA[i:], m.Contents)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.HardwareLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(m.HardwareLen))
	}
	if m.HardwareOpts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(m.HardwareOpts))
	}
	if m.Xid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(m.Xid))
	}
	if m.Secs != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(m.Secs))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(m.Flags))
	}
	if len(m.ServerName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(len(m.ServerName)))
		i += copy(dAtA[i:], m.ServerName)
	}
	if len(m.File) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDhcpv4(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	return i, nil
}

func encodeVarintDhcpv4(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DHCPv4) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovDhcpv4(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovDhcpv4(uint64(l))
	}
	if m.HardwareLen != 0 {
		n += 1 + sovDhcpv4(uint64(m.HardwareLen))
	}
	if m.HardwareOpts != 0 {
		n += 1 + sovDhcpv4(uint64(m.HardwareOpts))
	}
	if m.Xid != 0 {
		n += 1 + sovDhcpv4(uint64(m.Xid))
	}
	if m.Secs != 0 {
		n += 1 + sovDhcpv4(uint64(m.Secs))
	}
	if m.Flags != 0 {
		n += 1 + sovDhcpv4(uint64(m.Flags))
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovDhcpv4(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovDhcpv4(uint64(l))
	}
	return n
}

func sovDhcpv4(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDhcpv4(x uint64) (n int) {
	return sovDhcpv4(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DHCPv4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcpv4
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPv4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPv4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhcpv4
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhcpv4
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareLen", wireType)
			}
			m.HardwareLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardwareLen |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareOpts", wireType)
			}
			m.HardwareOpts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardwareOpts |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			m.Xid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secs", wireType)
			}
			m.Secs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Secs |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhcpv4
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = append(m.ServerName[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerName == nil {
				m.ServerName = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhcpv4
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcpv4(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcpv4
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDhcpv4(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDhcpv4
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhcpv4
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDhcpv4
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDhcpv4
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDhcpv4(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDhcpv4 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDhcpv4   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("flow/layers/dhcpv4.proto", fileDescriptor_dhcpv4_93a7f30c1e5d1c0e) }

var fileDescriptor_dhcpv4_93a7f30c1e5d1c0e = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xb1, 0x6e, 0xf2, 0x30,
	0x1c, 0xc4, 0x13, 0x08, 0x01, 0x0c, 0x48, 0x9f, 0x3c, 0x59, 0x0c, 0x0e, 0xfa, 0x26, 0x86, 0x92,
	0xa8, 0x2a, 0xaa, 0xaa, 0x8e, 0xb4, 0x43, 0x07, 0xd4, 0x56, 0x19, 0xbb, 0x20, 0x93, 0x38, 0x21,
	0x6d, 0x88, 0x23, 0xdb, 0x84, 0xf2, 0x06, 0x1d, 0xfb, 0x08, 0xec, 0x7d, 0x91, 0x8e, 0x8c, 0x9d,
	0x50, 0x45, 0xde, 0x82, 0xa9, 0xc2, 0x11, 0x11, 0x6a, 0xb7, 0xbb, 0xfb, 0xdd, 0x45, 0x8a, 0xff,
	0x00, 0x05, 0x31, 0x5b, 0x3a, 0x31, 0x59, 0x51, 0x2e, 0x1c, 0x7f, 0xe6, 0xa5, 0xd9, 0xd0, 0x4e,
	0x39, 0x93, 0x0c, 0x9a, 0x45, 0xd8, 0x1d, 0x84, 0x91, 0x9c, 0x2d, 0xa6, 0xb6, 0xc7, 0xe6, 0x4e,
	0xc8, 0x42, 0xe6, 0x28, 0x3c, 0x5d, 0x04, 0xca, 0x29, 0xa3, 0x54, 0x31, 0xfb, 0xff, 0x51, 0x01,
	0xe6, 0xed, 0xdd, 0xcd, 0x63, 0x36, 0x84, 0x5d, 0xd0, 0xf0, 0x58, 0x22, 0x69, 0x22, 0x05, 0xd2,
	0x7b, 0x7a, 0xbf, 0xed, 0x96, 0x1e, 0x22, 0x50, 0x4f, 0xc9, 0x2a, 0x66, 0xc4, 0x47, 0x15, 0x85,
	0x8e, 0x16, 0x9e, 0x81, 0xf6, 0x8c, 0x70, 0x7f, 0x49, 0x38, 0x9d, 0xc4, 0x34, 0x41, 0xd5, 0x9e,
	0xde, 0xef, 0x8c, 0x9a, 0xfb, 0xad, 0x55, 0x5b, 0x44, 0x89, 0xbc, 0x72, 0x5b, 0x47, 0x3c, 0xa6,
	0x09, 0xb4, 0x41, 0xa7, 0x6c, 0xb3, 0x54, 0x0a, 0x64, 0xfc, 0xae, 0x97, 0x5f, 0x7b, 0x48, 0xa5,
	0x80, 0xff, 0x40, 0xf5, 0x35, 0xf2, 0x51, 0xed, 0xd0, 0x72, 0x0f, 0x12, 0x62, 0x60, 0x08, 0xea,
	0x09, 0x64, 0xaa, 0x21, 0xd8, 0x6f, 0x2d, 0xf3, 0x30, 0x3c, 0xbf, 0x74, 0x55, 0x0e, 0x7b, 0xa0,
	0x16, 0xc4, 0x24, 0x14, 0xa8, 0xfe, 0xa7, 0x50, 0x00, 0x68, 0x81, 0x96, 0xa0, 0x3c, 0xa3, 0x7c,
	0x92, 0x90, 0x39, 0x45, 0x0d, 0xf5, 0x3f, 0xa0, 0x88, 0xee, 0xc9, 0x9c, 0x42, 0x08, 0x8c, 0x20,
	0x8a, 0x29, 0x6a, 0x2a, 0xa2, 0xf4, 0xb5, 0xf1, 0xb6, 0xb6, 0xb4, 0xd1, 0xf8, 0x73, 0x87, 0xf5,
	0xcd, 0x0e, 0xeb, 0xdf, 0x3b, 0xac, 0xbd, 0xe7, 0x58, 0x5b, 0xe7, 0x58, 0xdf, 0xe4, 0x58, 0xfb,
	0xca, 0xb1, 0xf6, 0x64, 0x9f, 0x3c, 0xbd, 0x78, 0x59, 0xf9, 0x51, 0x46, 0x07, 0x29, 0x67, 0xcf,
	0xd4, 0x93, 0x47, 0xef, 0x9c, 0xdc, 0x6f, 0x6a, 0xaa, 0x13, 0x5c, 0xfc, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x5f, 0x90, 0x49, 0x54, 0xd5, 0x01, 0x00, 0x00,
}
